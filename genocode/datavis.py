"""
This file contains functions which can be used to visualize the graphical
representation of the statistical data generated by DTC genetic tests. It gives
a better understanding of the risk of genotypes posed by the phenotypes in a
person.
"""

import math
from statistics import NormalDist
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns


def se_to_sd(serror, size):
    """
    Converts Standard Error to Standard deviation.
    Parameters:
        serror (float, required): The standard error of the data to be
            generated.
        size (float, required): The size of the population.
    Returns:
        float: A float value for the standard deviation.
    """
    sdev = serror*math.sqrt(size)
    return sdev

def ci_to_sd(lowerci, upperci, cival=95.0, size=100):
    """
    Converts Confidence interval to Mean and Standard deviation.
    Parameters:
        lowerci (float, required): The lower bound of the confidence
            interval.
        upperci (float, required): The upper bound of the confidence
            interval.
        cival (float, optional): The confidence level.
            It must be one of the following values.
            [99.9,99.5,99.0,95.0,90.0,85.0,80.0]
            The default value is 95 for 95% confidence interval.
        size (int, optional): The size of the sample to be generated.
            The default value is 100.
    Returns:
        float: A float value for Standard deviation.
    """
    zvals = {99.9:3.291, 99.5:2.807, 99.0:2.807, 95.0:1.960, 90.0:1.645, \
            85.0:1.645, 80.0:1.282}
    zscore = zvals[float(cival)]
    sdev = math.sqrt(size)*(upperci-lowerci)/zscore
    return sdev

def datagen(mean=None, sdev=None, serror=None, lowerci=None, upperci=None, \
            cival=95.0, size=100):
    """
    Generates random standard distribution data from mean and standard
    deviation.
    Parameters:
        mean(float, required): The mean of the data to be generated.
        sdev (float, optional): The standard deviation of the data to be
            generated.
        serror (float, optional): The standard error of the data to be
            generated.
        lowerci (float, required): The lower bound of the confidence
            interval.
        upperci (float, required): The upper bound of the confidence
            interval.
        cival (float, optional): The confidence level.
            It must be one of the following values.
            [99.9,99.5,99.0,95.0,90.0,85.0,80.0]
            The default value is 95 for 95% confidence interval.
        size (int, optional): The size of the sample to be generated.
            The default value is 100.
    Returns:
        numpy.ndarray: A numpy array with random standard distribution
        data.
    """
    if isinstance(upperci, float):
        sdev = ci_to_sd(lowerci, upperci, cival, size)
    if isinstance(serror, float):
        sdev = se_to_sd(serror, size)
    randdata = np.random.normal(mean, sdev, size)
    return randdata

def correctdatatype(mean=None, sdev=None, serror=None, upperci=None, \
                    lowerci=None):
    """
    Returns float values for each statistical parameter.
    Parameters:
        mean(int, optional): The mean.
        sdev (int, optional): The standard deviation of the data to be
            generated.
        serror (int, optional): The standard error of the data to be
            generated.
        lowerci (int, required): The lower bound of the confidence
            interval.
        upperci (int, required): The upper bound of the confidence
            interval.
    Returns:
        float: A float value for mean.
        float: A float value for sd.
        float: A float value for se.
        float: A float value for lowerci.
        float: A float value for upperci.
    """
    if isinstance(mean, int):
        fmean = float(mean)
    else:
        fmean = mean
    if isinstance(sdev, int):
        fsdev = float(sdev)
    else:
        fsdev = sdev
    if isinstance(serror, int):
        fserror = float(serror)
    else:
        fserror = serror
    if isinstance(upperci, int):
        fuci = float(upperci)
    else:
        fuci = upperci
    if isinstance(lowerci, int):
        flci = float(lowerci)
    else:
        flci = lowerci
    return fmean, fsdev, fserror, fuci, flci

def compounddata(mean1=None, sdev1=None, serror1=None, upperci1=None, \
                lowerci1=None, cival1=95.0, mean2=None, sdev2=None, \
                serror2=None, upperci2=None, lowerci2=None, cival2=95.0, \
                mean3=None, sdev3=None, serror3=None, upperci3=None, \
                lowerci3=None, cival3=95.0, size=1000):
    """
    A partial wrapper function to generate three datasets of similar
    attributes.
    Parameters:
        mean1(int/float, optional): The mean.
        sdev1, sdev2, sdev3 (int/float, optional): The standard
            deviation of the data to be generated.
        serror1, serror2, serror3 (int/float, optional): The standard
            error of the data to be generated.
        lowerci1, lowerci2, lowerci3 (int/float, optional): The lower
            bound of the confidence interval.
        upperci1, upperci2, upperci3 (int/float, optional): The upper
            bound of the confidence interval.
        cival1 (float, optional): The upper bound of the confidence
            interval.

    Returns:
        numpy.ndarray: A numpy array with random standard distribution
            data.
        numpy.ndarray: A numpy array with random standard distribution
            data.
        numpy.ndarray: A numpy array with random standard distribution
            data.
    """
    flmean1, flsdev1, flserror1, flupperci1, fllowerci1 = correctdatatype(\
                                                                    mean1, \
                                                                    sdev1, \
                                                                    serror1, \
                                                                    upperci1, \
                                                                    lowerci1)
    flmean2, flsdev2, flserror2, flupperci2, fllowerci2 = correctdatatype(\
                                                                    mean2, \
                                                                    sdev2, \
                                                                    serror2, \
                                                                    upperci2, \
                                                                    lowerci2)
    flmean3, flsdev3, flserror3, flupperci3, fllowerci3 = correctdatatype(
                                                                    mean3, \
                                                                    sdev3, \
                                                                    serror3, \
                                                                    upperci3, \
                                                                    lowerci3)

    datagenerated1 = datagen(mean=flmean1, sdev=flsdev1, serror=flserror1, \
                            upperci=flupperci1, lowerci=fllowerci1, \
                            cival=cival1, size=size)
    datagenerated2 = datagen(mean=flmean2, sdev=flsdev2, serror=flserror2, \
                            upperci=flupperci2, lowerci=fllowerci2, \
                            cival=cival2, size=size)
    datagenerated3 = datagen(mean=flmean3, sdev=flsdev3, serror=flserror3, \
                            upperci=flupperci3, lowerci=fllowerci3, \
                            cival=cival3, size=size)

    return datagenerated1, datagenerated2, datagenerated3

def databinning(datagenerated1, datagenerated2, datagenerated3, bins_list):
    """
    A function to create 3 histogram bins.
    Parameters:
        datagenerated1 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated2 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated3 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        bins_list(numpy.ndarray, required): A numpy array listing the
            edges of the bins.
    Returns:
        numpy.ndarray: The values of first histograms.
        numpy.ndarray: The values of second histograms.
        numpy.ndarray: The values of third histograms.
    """
    yhist1, _ = np.histogram(a=datagenerated1, bins=bins_list)
    yhist2, _ = np.histogram(a=datagenerated2, bins=bins_list)
    yhist3, _ = np.histogram(a=datagenerated3, bins=bins_list)

    return yhist1, yhist2, yhist3

def histplotting(datagenerated1, datagenerated2, datagenerated3, \
                bins_list=None):
    """
    A function to plot 3 overlapping histograms
    Parameters:
        datagenerated1 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated2 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated3 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        bins_list(numpy.ndarray, required): A numpy array listing the
            edges of the bins.
    Returns:
        None.
    """
    a4_dims = (12, 9)
    _, axes = plt.subplots(figsize=a4_dims)
    sns.distplot(ax=axes, a=datagenerated1, bins=bins_list, color='blue', \
                label='Wild')
    sns.distplot(ax=axes, a=datagenerated2, bins=bins_list, color='orange', \
                label='Single SNP')
    sns.distplot(ax=axes, a=datagenerated3, bins=bins_list, color='green', \
                label='Double SNP')

    plt.xlabel('BMI (kg/m$^2$)', fontsize=20)
    plt.ylabel('Probability Density', fontsize=20)
    plt.title('Normal Distribution Curves of Each Genotype', fontsize=20)

    matplotlib.rc('xtick', labelsize=20)
    matplotlib.rc('ytick', labelsize=20)

    plt.legend(fontsize=20)

    return None

def pdfgen(mean1, sdev1, mean2, sdev2, mean3, sdev3, bins_list):
    """
    A function to generate 3 probability density function data
    Parameters:
        mean1 (float, required): The mean of the first dataset.
        mean2 (float, required): The mean of the second dataset.
        mean3 (float, required): The mean of the third dataset.
        sdev1 (float, required): The standard deviation of the first
            dataset
        sdev2 (float, required): The standard deviation of the second
            dataset
        sdev3 (float, required): The standard deviation of the third
            dataset
        bins_list(numpy.ndarray, required): A numpy array listing the
            edges of the bins.
    Returns:
        None.
    """

    pdf1 = 1/(sdev1 * np.sqrt(2 * np.pi)) * np.exp(- (bins_list - mean1)**2 / \
            (2 * sdev1**2))
    pdf2 = 1/(sdev2 * np.sqrt(2 * np.pi)) * np.exp(- (bins_list - mean2)**2 / \
            (2 * sdev2**2))
    pdf3 = 1/(sdev3 * np.sqrt(2 * np.pi)) * np.exp(- (bins_list - mean3)**2 / \
            (2 * sdev3**2))

    return pdf1, pdf2, pdf3

def pdfplotting(mean1, sdev1, mean2, sdev2, mean3, sdev3, bins_list):
    """
    A function to plot 3 overlapping probability density function
    curves.
    Parameters:
        datagenerated1 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated2 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated3 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        bins_list(numpy.ndarray, required): A numpy array listing the
            edges of the bins.
    Returns:
        None.
    """

    plt.figure(figsize=(12, 9))

    pdf1 = pdfgen(mean1, sdev1, mean2, sdev2, mean3, sdev3, bins_list)[0]
    pdf2 = pdfgen(mean1, sdev1, mean2, sdev2, mean3, sdev3, bins_list)[1]
    pdf3 = pdfgen(mean1, sdev1, mean2, sdev2, mean3, sdev3, bins_list)[2]

    plt.plot(bins_list, pdf1, linewidth=2, color='b', label='Wild')
    plt.plot(bins_list, pdf2, linewidth=2, color='orange', \
                    label='Single SNP')
    plt.plot(bins_list, pdf3, linewidth=2, color='g', label='Double SNP')

    plt.xlabel('BMI (kg/m$^2$)', fontsize=20)
    plt.ylabel('Probability Density', fontsize=20)
    plt.title('Normal Distribution Curves of Each Genotype', fontsize=20)

    matplotlib.rc('xtick', labelsize=20)
    matplotlib.rc('ytick', labelsize=20)

    plt.legend(fontsize=20)

    return None

def violinplotting(datagenerated1, datagenerated2, datagenerated3):
    """
    A function to plot 3 consecutive violin plots
    Parameters:
        datagenerated1 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated2 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        datagenerated3 (numpy.ndarray, required): A numpy array with
            random standard distribution data.
        bins_list(numpy.ndarray, required): A numpy array listing the
            edges of the bins.
    Returns:
        None.
    """

    plt.figure(figsize=(12, 9))

    plt.violinplot(datagenerated1, positions=[1], showmeans=True)
    plt.violinplot(datagenerated2, positions=[2], showmeans=True)
    plt.violinplot(datagenerated3, positions=[3], showmeans=True)

    plt.xlabel('Genotype', fontsize=20)
    plt.ylabel('BMI (kg/m$^2$)', fontsize=20)
    plt.title('Effect of Genotype on Phenotype', fontsize=20)

    matplotlib.rc('xtick', labelsize=20)
    matplotlib.rc('ytick', labelsize=15)

    locs, labels = plt.xticks()
    locs = [1, 2, 3]
    labels = ['TT', 'AT', 'AA']
    plt.xticks(locs, labels)

    return None

def percent_overlap(mean1=None, sdev1=None, mean2=None, sdev2=None, \
                    mean3=None, sdev3=None):
    """
    A function to estimate the percentage of overlap between multiple
    normally distributed data.
    Parameters:
        mean1 (float, required): The mean of the first data set.
        mean2 (float, required): The mean of the second data set.
        mean3 (float, required): The mean of the third data set.
        sdev1 (float, required): The standard deviation of the first
        sdev2 (float, required): The standard deviation of the second
            data set.
        sdev3 (float, required): The standard deviation of the third
            data set.
    Returns:
        numpy.float64: A float value showing the percentage overlap
            between 1st and 2nd data sets.
        numpy.float64: A float value showing the percentage overlap
            between 1st and 3rd data sets.
        numpy.float64: A float value showing the percentage overlap
            between 2nd and 3rd data sets.
    """
    overlap_11_perc = 'The likelihood of a wild genotype null effect is \
                        {0:1.2%}'.format(NormalDist(mu=mean1, sigma=sdev1).\
                        overlap(NormalDist(mu=mean1, sigma=sdev1)))
    overlap_12_perc = 'The likelihood of a single SNP genotype null effect\
                        is {0:1.2%}'.format(NormalDist(mu=mean1, sigma=sdev1).\
                        overlap(NormalDist(mu=mean2, sigma=sdev2)))
    overlap_13_perc = 'The likelihood of a double SNP genotype null effect\
                        is {0:1.2%}'.format(NormalDist(mu=mean1, sigma=sdev1).\
                        overlap(NormalDist(mu=mean3, sigma=sdev3)))
    return overlap_11_perc, overlap_12_perc, overlap_13_perc
